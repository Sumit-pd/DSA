/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

struct Node{
    Node * links[26] ; // for the links as there are 26 letters in eb=nglish aphabet
    bool flag = false ;

    bool containKey(char ch)
    {
        return links[ ch - 'a'] != NULL ;
    }
    bool isEnd(){
        return flag ;
    }
    void put(char ch , Node * node )
    {
        links[ch - 'a'] = node ; // setting the links for the trie 
    }
    Node * get(char ch)
    {
        return links[ch - 'a'] ;
    }
    void setEnd()
    {
        flag = true ;
    }

};
class Trie {

public:

    Node * root ;
    Trie() {
        root = new Node() ;

    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node * node = root ;
        for (int i = 0; i < word.length(); ++i)
        {
            if(!node->containKey(word[i]))
            {
                node->put(word[i],new Node() ) ;
            }
            node = node->get(word[i]) ;
        }
        node -> setEnd() ;

    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node * node = root ;
        for (int i = 0; i < word.length(); ++i)
        {
            if (!node -> containKey(word[i]))
            {
                return false ;
            }
            node = node -> get(word[i]) ;
            
        }
        return node->isEnd() ;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
            Node * node = root ;
        for (int i = 0; i < prefix.length(); ++i)
        {
            if (!node -> containKey(prefix[i]))
            {
                return false ;
            }
            node = node -> get(prefix[i]) ;
        }
        return true ;
    }
};
    

